{
    "gameHTML": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bouncing Ball Game</title>\n    <style>\n        body {\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #282c34;\n        }\n        canvas {\n            border: 2px solid #ffffff;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"gameCanvas\"></canvas>\n    <script>\n        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n\n        canvas.width = 800;\n        canvas.height = 600;\n\n        // Ball properties\n        let ball = {\n            x: canvas.width / 2,\n            y: canvas.height / 2,\n            radius: 20,\n            color: 'red',\n            vx: 0,\n            vy: 0,\n            isJumping: false,\n            jumpPower: 15,\n            gravity: 0.5,\n        };\n\n        // Level data\n        const currentLevel = {{levelData}};\n\n        // Draw functions\n        function drawBall() {\n            ctx.fillStyle = ball.color;\n            ctx.beginPath();\n            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function drawGoal() {\n            if (currentLevel.goal) {\n                const goal = currentLevel.goal;\n                ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n                ctx.beginPath();\n                ctx.arc(goal.x, goal.y, goal.radius, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.fillStyle = 'white';\n                ctx.font = '20px Arial';\n                ctx.fillText('Goal', goal.x - 20, goal.y - 35);\n            }\n        }\n\n        function drawSpikes() {\n            ctx.fillStyle = 'silver';\n            for (let spike of currentLevel.spikes) {\n                ctx.beginPath();\n                ctx.moveTo(spike.x, spike.y);\n                ctx.lineTo(spike.x - 20, spike.y + 40);\n                ctx.lineTo(spike.x + 20, spike.y + 40);\n                ctx.closePath();\n                ctx.fill();\n            }\n        }\n\n        function drawBouncyPlatforms() {\n            ctx.fillStyle = 'blue';\n            for (let platform of currentLevel.bouncyPlatforms) {\n                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);\n            }\n        }\n\n        function drawCoins() {\n            ctx.fillStyle = 'yellow';\n            for (let coin of currentLevel.coins) {\n                ctx.beginPath();\n                ctx.ellipse(coin.x, coin.y, 10, 15, 0, 0, Math.PI * 2);\n                ctx.fill();\n            }\n        }\n\n        function update() {\n            ball.vy += ball.gravity;\n            ball.x += ball.vx;\n            ball.y += ball.vy;\n\n            // Collision with the ground\n            if (ball.y + ball.radius > canvas.height) {\n                ball.y = canvas.height - ball.radius;\n                ball.vy = 0;\n                ball.isJumping = false;\n            }\n\n            // Check for spikes\n            for (let spike of currentLevel.spikes) {\n                if (ball.x > spike.x - 20 && ball.x < spike.x + 20 && ball.y + ball.radius > spike.y) {\n                    alert('You hit a spike! Resetting the level.');\n                    resetLevel();\n                }\n            }\n\n            // Check for coins\n            currentLevel.coins = currentLevel.coins.filter(coin => {\n                const collected = (ball.x > coin.x - 10 && ball.x < coin.x + 10 && ball.y > coin.y - 15 && ball.y < coin.y + 15);\n                return !collected;\n            });\n\n            // Check for goal\n            const goal = currentLevel.goal;\n            if (goal && ball.x > goal.x - goal.radius && ball.x < goal.x + goal.radius && ball.y > goal.y - goal.radius && ball.y < goal.y + goal.radius) {\n                alert('You reached the goal!');\n                resetLevel();\n            }\n        }\n\n        function resetLevel() {\n            ball.x = canvas.width / 2;\n            ball.y = canvas.height / 2;\n            ball.vx = 0;\n            ball.vy = 0;\n            ball.isJumping = false;\n        }\n\n        // Handle keyboard input for movement\n        window.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowRight') {\n                ball.vx = 5; // Move right\n            } else if (e.key === 'ArrowLeft') {\n                ball.vx = -5; // Move left\n            } else if (e.key === ' ' && !ball.isJumping) { // Space bar to jump\n                ball.vy = -ball.jumpPower;\n                ball.isJumping = true;\n            }\n        });\n\n        window.addEventListener('keyup', (e) => {\n            if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {\n                ball.vx = 0; // Stop horizontal movement when keys are released\n            }\n        });\n\n        function gameLoop() {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawBall();\n            drawGoal();\n            drawSpikes();\n            drawBouncyPlatforms();\n            drawCoins();\n            update();\n            requestAnimationFrame(gameLoop);\n        }\n\n        resetLevel();\n        gameLoop();\n    </script>\n</body>\n</html>"
  }
  