<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>WebVR Hand Locomotion</title>
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
  </head>
  <body>
    <a-scene>
      <a-entity id="player" position="0 1.6 0">
        <!-- Camera -->
        <a-camera id="camera"></a-camera>
        <!-- Left Hand -->
        <a-entity
          id="leftHand"
          oculus-touch-controls="hand: left"
          position="0 0 0"
        ></a-entity>
        <!-- Right Hand -->
        <a-entity
          id="rightHand"
          oculus-touch-controls="hand: right"
          position="0 0 0"
        ></a-entity>
      </a-entity>

      <a-box position="0 0.5 -3" rotation="0 45 0" width="1" height="1" depth="1"></a-box>
      <a-sky color="#ECECEC"></a-sky>

      <script>
        AFRAME.registerComponent("hand-locomotion", {
          init: function () {
            this.player = document.getElementById("player");
            this.leftHand = document.getElementById("leftHand");
            this.rightHand = document.getElementById("rightHand");

            this.lastLeftHandPosition = this.leftHand.object3D.position.clone();
            this.lastRightHandPosition = this.rightHand.object3D.position.clone();
            this.velocity = new THREE.Vector3();
            this.maxArmLength = 1.5;
            this.unStickDistance = 1.0;

            this.isLeftHandTouching = false;
            this.isRightHandTouching = false;

            this.el.sceneEl.addEventListener("enter-vr", () => {
              this.resetHandPositions();
            });
          },

          tick: function (time, deltaTime) {
            deltaTime = deltaTime / 1000; // Convert ms to seconds

            const leftHandMovement = this.calculateHandMovement(
              this.leftHand,
              this.lastLeftHandPosition
            );
            const rightHandMovement = this.calculateHandMovement(
              this.rightHand,
              this.lastRightHandPosition
            );

            // Combine hand movements
            const combinedMovement = leftHandMovement
              .clone()
              .add(rightHandMovement)
              .multiplyScalar(0.5);

            // Apply movement to player
            this.player.object3D.position.add(combinedMovement);

            // Update last positions
            this.lastLeftHandPosition.copy(this.leftHand.object3D.position);
            this.lastRightHandPosition.copy(this.rightHand.object3D.position);
          },

          calculateHandMovement: function (hand, lastPosition) {
            const handPosition = hand.object3D.position.clone();
            const headPosition = this.player.object3D.position.clone();
            const distance = handPosition.distanceTo(headPosition);

            // Clamp the arm length to avoid unrealistic stretching
            if (distance > this.maxArmLength) {
              const direction = handPosition
                .clone()
                .sub(headPosition)
                .normalize();
              handPosition.copy(
                headPosition.add(direction.multiplyScalar(this.maxArmLength))
              );
            }

            return handPosition.sub(lastPosition);
          },

          resetHandPositions: function () {
            this.lastLeftHandPosition.copy(this.leftHand.object3D.position);
            this.lastRightHandPosition.copy(this.rightHand.object3D.position);
          },
        });

        document.querySelector("#player").setAttribute("hand-locomotion", "");
      </script>
    </a-scene>
  </body>
</html>
